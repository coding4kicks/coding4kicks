{"cards": [{"answer": "Two or more sequences of actions that may be executed simultaneously. ", "question": "What defines a concurrent program?"}, {"answer": "1) Multiprogramming \u2013 interleaving on a single processor.\n2) Multiprocessing \u2013 two or more processors may share memory or be connected by a network.", "question": "What are the two general ways a program may be executed concurrently?"}, {"answer": "1) Process \u2013 OS process with own address space\n2) Thread \u2013 run under language run-time system, share same OS address space\n3) Task \u2013 messages between actors", "question": "What are three terms to describe a sequence of actions?\nWhat are their connotations?"}, {"answer": "Handling non-determinism: more than one possible sequence of actions for the same input.", "question": "What is a main difficulty in designing concurrent systems?"}, {"answer": "Mechanisms to initiate and terminate independent sequential processes (tasks/thread).", "question": "What does every programming language with explicit concurrency provide?"}, {"answer": "1) communication between processes (channels, broadcasts, shared variables/objects)\n2) coordination between processes (wait)\n3) atomicity", "question": "What are three other mechanisms that concurrent programming languages provide some or all of?"}, {"answer": "A form of interprocess communication.\nBuffering \u2013 buffered or unbuffered\nSynchronicity \u2013 synchronous or asynchronous \nMessage Order \u2013 transmission order preserved or not", "question": "What is message passing?\nWhat are the main distinctions between forms of message passing?"}, {"answer": "An action that will either complete successfully or terminate in a state equal to the state prior to the initiation of the action.", "question": "What is an atomic action?"}, {"answer": "A critical section.", "question": "What do you call a section of a program that accesses shared resources?"}, {"answer": "Mutual exclusion", "question": "What is it called when only one process at a time is allowed to be in its critical section?"}, {"answer": "Using a loop to wait for a condition.", "question": "What is busy waiting?"}, {"answer": "When a process can never continue due to the state of another process.", "question": "What is a deadlock?"}, {"answer": "Agree on an ordering of lock acquisition and acquire all locks necessary to complete the transaction.", "question": "How do processes avoid deadlock in the locking phase?"}, {"answer": "A concurrency mechanism without busy waiting.  Integer flags are set, indicating the number of processes that may enter the critical, if at zero, the process is but in a waiting queue, until notification/signal that it may proceed.", "question": "What are semaphores?"}, {"answer": "Synchronized objects with all synchronization details placed in the operations of the data type.  The idea is to make sure that signaling happens and deadlock is avoided.", "question": "What are monitors?"}, {"answer": "Reactive objects, with no shared state, that communicate through buffered asynchronous message passing.  Each actor executes some computation in response to a message and sends out a reply when the computation is done.  Message order is not guaranteed.", "question": "What are actors?"}, {"answer": "1) Send communications \u2013 to itself or other actors\n2) Create actors\n3) Specify replacement behavior (another actor)", "question": "What are the three basic actions of an actor?"}, {"answer": "A mail address.", "question": "What does one actor need to communicate with another actor?"}, {"answer": "1) A unique tag \u2013 distinguishing it from other tasks\n2) A target \u2013 mail address of intended receiver\n3) A communication \u2013 the data in the message", "question": "What are the three main parts of a task?"}, {"answer": "By becoming another actor after processing input.", "question": "How does an actor change state?"}], "title": "Concepts in Prog Langs \u2013 Ch. 14"}