{"cards": [{"answer": "A definition of a function.", "question": "From a mathematical perspective, what is a program?"}, {"answer": "The inputs and the state prior of the machine prior to program start.", "question": "What determines the output of a program?"}, {"answer": "Error termination or nonterminations.", "question": "Why might an expression not have a value?"}, {"answer": "A function with value some arguments but not all.", "question": "What is a partial function?"}, {"answer": "All possible inputs.", "question": "What is the domain of a function?"}, {"answer": "When an algorithm exists that given any x contained in A as input (the domain), halts with y = f(x) as output, (the range).", "question": "When is a function f: A -> B computable."}, {"answer": "The class of functions on natural numbers that are computable in principle.  ", "question": "What is the class of partial recursive functions?"}, {"answer": "proposed Church\u2019s thesis.", "question": "What did Alonzo Church do?"}, {"answer": "A widely held belief about the relationship between mathematical definitions and the real world of computing, stating that the same class of functions on the integers can be computed by any general computing device.  This is the class of partial recursive functions, sometimes  called the class of computable functions.", "question": "What is Church\u2019s thesis?"}, {"answer": "A mathematical one, a second based on turing machines, and the lambda calculus.  ", "question": "What are the three equivalent definitions of the class of computable functions.  "}, {"answer": "That it can express the class of partially recursive functions.  (pretty much all standard programming languages.)", "question": "What does it mean if a programming language is Turing complete mean?"}, {"answer": "The halting problem.", "question": "What is an example of an undecidable program?"}, {"answer": "Try to write a program that will tell you another program will stop.  You can\u2019t.  You need to halt to report if the program is un-halting, just after which the program could halt.  Proof uses a chain of programs to develop a contradiction.  Program P with input x, then program Q(P, x), then D(P) such that it runs forever if Q(P, x) halts, otherwise if Q(P, x) runs forever it halts.", "question": "What is the halting problem?"}, {"answer": "John McCarthy", "question": "Who had a lisp and liked parenthesis?"}, {"answer": "Expressions, Statements, and Declarations", "question": "What are the three most basic parts of speech for a programming language?"}, {"answer": "A syntactic entity that may be evaluated to determine its value.\n(may also change the state of the machine in addition to producing a value.)", "question": "What is an expression?"}, {"answer": "A command that alters the state of the machine an explicit way.", "question": "What is a statement?"}, {"answer": "A syntactic entity that introduces (declares) a new identifier.", "question": "What is a declaration?"}, {"answer": "Expression\nStatements\n(Are declarative languages based on declarations?)", "question": "Which of the basic parts of speech is Lisp based on?  \nWhat about Assembly?"}, {"answer": "Conditional expressions that produce a value instead of causing a jump.", "question": "What type of expression did Lisp introduct?"}, {"answer": "A Lisp expression\nA continuation \u2013 function representing part of program left to evaluate.\nAssociation (A) list \u2013 run time stack\nA heap \u2013 memory reference by pointers in the A-list. (set of cons cells)", "question": "What are the four components of the Lisp abstract machine?"}, {"answer": "atom \u2013 special bit pattern where function returns true if atom false otherwise.\neq \u2013 equality\ncons \u2013 construct x and y return pointer z (combine two lists into a new list)\ncar \u2013 return address register (head of list)\ncdr \u2013 return decrement register (tail of list \u2013 everything but head)", "question": "Five basic ops on a cons cell."}, {"answer": "The ability to construct and execute a program.", "question": "What distinct runtime feature did lisp introduce?"}, {"answer": "functions and recursive calls.", "question": "What are Lisp computations based upon instead of assignment and iterative loops?"}, {"answer": "A function that either takes other functions as input or produces them as output.  \nDifferent from first order functions (input and results are not functions).  \nOr, the set of all non first order functions (2nd order, 3rd order, \u2026)\n2nd order takes a 1st order and so on.", "question": "What is a high order function?"}, {"answer": "Parts of memory not accessible to a program.  The automatic collections of which was introduced by Lisp.", "question": "What is garbage?"}, {"answer": "Side Effects", "question": "What do pure lisp expression not have, that many other programming language expressions do?"}, {"answer": "Syntax", "question": "What do you call the text of a program?"}, {"answer": "Semantics", "question": "What do you call the thing the program does?"}, {"answer": null, "question": "\u201cProgramming languages that are convenient for people to use are built around concepts and abstractions that may not correspond directly to features of the underlying machine.\u201d\n-"}, {"answer": "Translates a programming language into machine code.", "question": "What does a compiler do?"}, {"answer": "Combines translation and program execution.", "question": "What does an interpreter do?"}, {"answer": "Lexical Analysis \u2013 input symbols scanned and turned into tokens\nSyntax Analysis \u2013 tokens grouped into syntactic units: expressions, statements and declarations.  Also called parsing.\nSemantic Analysis \u2013 Apply rules and procedure depending upon the context of expressions, such as type checking.  (different from the more common use of the word: \u201cmeaning\u201d)\nIntermediate code generator \u2013 not necessarily target machines code, i.e. java byte code.\nCode optimizer \nCode generator \u2013 choose memory location, register or both for each variable.", "question": "What are the six typical phases of a compiler, from source to target?"}, {"answer": "Common Subexpression Elimination\nCopy Propagation (eliminate pointer chains on assignment: z=y, y=x to z=x)\nDead-Code Elimination (places never reached)\nLoop Optimization (remove expressions)\nIn-Lining Function Calls", "question": "What are five standard optimizations?"}, {"answer": "A method for defining an infinite set of expressions.", "question": "What is a grammar?"}, {"answer": "No, BNF is Backus Normal Form.\nNot sure on the relation with <a href=\"http://www.w3schools.com\" target=\"_blank\">Bacchus</a>", "question": "Does BNF have anything to do with BFFs?"}, {"answer": "e is the start symbol\n0 \u2013 7, +, - are terminals\ne, n, d or non-terminals", "question": "Example BNF\ne ::= n | e + e | e - d\nn :: = d | nd\nd ::= 0 | 1 | 2|  3 | 4 | 5 | 6 | 7\nWhat is e?\nWhat are terminals and non-terminals?"}, {"answer": "A sequence of steps converting an expression into a string of terminals.", "question": "What is a derivation?"}, {"answer": "A representation of the derivation in graph form (a tree).  ", "question": "What is a parse tree?"}, {"answer": "A grammar where an expression has more than one parse tree.", "question": "What is an ambiguous grammar?"}, {"answer": "1) Precedence (i.e. * before +)\n2) Associativity  (i.e. 1 + 3 + 7, evaluate from left to right or vice versa)", "question": "What two parsing conventions help to eliminate ambiguous grammars?"}, {"answer": "Mathematical system that can illustrate programming concepts.", "question": "What is the lambda calculus"}, {"answer": "1) Notation for defining functions\n2) Proof system for proving equations\n3) Set of calculations called reductions", "question": "What are the three main parts of lambda calculus?"}, {"answer": "No, its calculation is a form of symbolic evaluation of expressions.", "question": "Is lambda calculus a type of calculus (analysis)?"}, {"answer": "1) parameterization (through function expression)\n2) binding (by declarations)", "question": "What two concepts, that are common to almost all programming languages, does the lambda calculus provide fundamental forms of?"}, {"answer": "1) Function definition (lambda abstraction)\n2) Function application\nThere are no domain-specific operators such as addition.\ni.e. h(x) = f(g(x)) but not h(x) = f(x + x)\nIt is possible to add domain-specific operators", "question": "What the two components of the pure form of lambda calculus?"}, {"answer": "&lambda;x.x\nmore familiar: I(x) = x", "question": "What is the identity function?"}, {"answer": "A programming language (or applied lambda calculus)", "question": "Pure lambda calculus plus additional data types equals what?"}, {"answer": "M ::= x | MM | &lambda;x.M", "question": "What is the BNF grammar for lambda calculus?"}, {"answer": "The form is MM where M1 = &lambda;.x.x and M2 = 5\nThis is called an application", "question": "What is the form of (&lambda;.x.x)5?\nWhat is it called?"}, {"answer": "The form is &lambda;x.M.\nThis is called a lambda abstraction", "question": "What is the form of &lambda;x.(f(gx))?\nWhat is it called?"}, {"answer": "Either the free fighter or the engaged fighter (free or bound).", "question": "What are the two possible states of a variable?"}, {"answer": "If it isn\u2019t declared, i.e. x + 3", "question": "What makes a variable free?"}, {"answer": "The binding operator.  It binds a variable with a specific scope.", "question": "What is &lambda; called?"}, {"answer": "Part of an expression.", "question": "What is scope?"}, {"answer": "It is bound.", "question": "Is x in &lambda;x.M bound or free?"}, {"answer": "That it is just a placeholder. The meaning of x does not depend on x in &lambda:x.M.\ni.e. x in integral &int; f(x) or in the logical formula &forall; x.P(x)\nSo &lambda:x.x = &lambda:y.y just like &int; f(x) = &int; f(y)", "question": "What does it mean if a variable is bound?"}, {"answer": "Expressions that differ only in bound variable names.", "question": "What are alpha equivalents?"}, {"answer": "The scope of the binding &lambda;x\nA variable appearing in an expression M is bound if it appears in the scope of some &lambda;x and is free otherwise.\n(good set theoretic description in book)", "question": "In &lambda;x.M, what is M called?"}, {"answer": "Fist x is binding occurrence\nSecond x is a bound occurrence (variable)\nFirst y is a binding occurrence\nSecond y is a bound occurrence\nThird y is a free occurrence", "question": "In &lambda;x.(&lambda;y.xy)y what are the different x and y terms called?"}, {"answer": "The central equational axiom. (three others along with four inference rules)\n(&lambda;x.M)N = [N/x]M\nOr substituting occurrence of x in M with N\nParallels exist with macroexpansion and inline substitution of funcions.", "question": "What is the axiom of beta equivalence?"}, {"answer": "Recursive declarations", "question": "What involves find fixed points?"}, {"answer": "A value such that the function produces the value, i.e. G(f) = f", "question": "What is a fixed point of a function?"}, {"answer": "Defined with a fixed-point operator\n:Y = &lambda;f.( &lambda;x.f(xx))( &lambda;x.f(xx))\nWhere for any f, Yf is a fixed point of f: Yf = f(Yf)\n(the Y combinator)", "question": "In lambda calculus how are fixed points defined?"}, {"answer": "A style of mathematical semantics for imperative programs, where the meaning of a simple program is a mathematical function from states to states, in which a state is a mathematical function representing the values in memory.", "question": "What does denotational semantics refer to?"}, {"answer": "The languages humans speak and write.", "question": "What are natural languages?"}, {"answer": "Imperative (command to implicit subject: Pick up the fish.)\nDeclarative (expresses a fact: Claude likes bananas.)\nInterrogatives (questions)\nExclamatory (interjection: Ugh!)", "question": "What are the four main kinds of sentences?"}, {"answer": "A language where most computation is done by evaluation of expressions containing functions.\nOr\nA language that does not have side effects.", "question": "What are two ways of defining the phrase functional language?"}, {"answer": "Within the scope of  of specific definitions x1, \u2026, xn, all occurrences of an expression e containing only variables x1, \u2026, xn have the same value.\nPure functional languages pass this test.  Called referentially transparent.", "question": "What is the declarative language test?"}, {"answer": "Optimization \u2013 if an expression appears multiple times in a scope, it only needs to be computed once since there are no side effects.\nExecution \u2013 expressions can be computed in parallel since no state needs to be maintained between different expressions.", "question": "What\u2019s appealing about functional languages for optimization and execution?"}], "title": "Concepts in Prog Langs - Part 1"}