{"cards": [{"answer": "An underscore _", "question": "What holds the results of the last operation in the shell?"}, {"answer": "Dynamic, variables are bound at runtime.", "question": "What is python\u2019s type system?"}, {"answer": "date = raw_input(\u201cInput: \u201c)\n*p3 use input()", "question": "How do you get input from the prompt?"}, {"answer": "Best viewed as a single, immutable object.\nLists are for adding/removing items.", "question": "Tuple?"}, {"answer": "Unordered and can\u2019t be indexed (unlike lists and tuples)", "question": "Set?"}, {"answer": "Most finely tuned data type\nUse instead of rolling your own data structure\nUse as a container for fast lookups on unordered data.", "question": "Dict?"}, {"answer": "range(i, j [, stride])\n*p3 returns generator (p2 call xrange() for one)", "question": "How to create a list of numbers? "}, {"answer": "Local, use global keyword to get out.", "question": "What is variable scope inside a function?"}, {"answer": "Powerful way of writing programs based on processing pipelines, streams, or data flows.\nyield line", "question": "What is a generator?"}, {"answer": "Function written to operate as a task that processes a sequence of inputs.\nUseful for concurrent programs based on producer/consumer.\nUse with generators.\nLine = (yield)", "question": "What is a coroutine?"}, {"answer": "Normally apply to instances.  Can use @static to apply to class/type.", "question": "On whom do methods act?"}, {"answer": "dir(module)", "question": "How do you list contents of a module?"}, {"answer": "The dastardly Backslash \u2018/\u2019", "question": "What is the escape character for string literals?"}, {"answer": "Unicode prefix. \n*not necessary in p3\nWhat is r\u2019 at the front of a string?", "question": "What is u\u2019 at the front of a string?"}, {"answer": "Everything, all data are objects.", "question": "Which data are objects in python?"}, {"answer": "Each object has an identity, a type/class, and a value.\nThe identity can be viewed as a pointer to a location in memory.\nThe type describes the objects internal representation, its methods and operations.\nValue \u2013 the created object, an instance.  Its type and identity can no longer be changed.  If the value itself is either mutable or immutable.", "question": "What three things make up an object?"}, {"answer": "Containers or Collections", "question": "What are objects that contain other objects called?"}, {"answer": "Attributes \u2013 values associated with the object.\nMethods \u2013 functions that perform operations on the object.", "question": "What two things characterize an object?"}, {"answer": "i.e. a_obj = b_obj\nFor immutable data types (numbers, strings, tuples, set) by copy.\nFor mutable data types (lists and dicts) by reference.\nTo receive a copy of mutable data types use either\n:shallow copy: new_list = list(old_list)\ndeep copy: import copy; new_list= copy.deepcopy(old_list)", "question": "How does object assignement work?"}, {"answer": "That all objects have equal status, so a dict could hold numbers, functions, modules, exceptions, and so on.", "question": "What does it mean that all python objects are first class?"}, {"answer": "None\nNumbers: int/long/float/complex & bool\nSequences: str/Unicode/list/tuple/exrange\n(support iteration and slicing)\nMapping: dict\n(arbitrary collection of objects indexed by a nearly arbitrary collection of objects - the latter being immutable and thus hashable)\nSets: set/frozenset \n(unordered collection of unique items)", "question": "What are python\u2019s built-in types (for data representation)?"}, {"answer": "indexing/slicing: s[i], s[i:j], s[i:j:stride]\ntruth checks: all(s), any(s)\nconcatenation: s + t\nmake copies: s * n\nvariable unpacking: s, t = v\nmembership: x in s, x not in s\niteration: for x in s\nalso: len(s), min(s), max(s), sum(s)", "question": "What operations are available to all sequences?"}, {"answer": "slice/index assignment  (i.e. s[i:j] = t)\nslice/index deletion (i.e. del s[i])\nWhat methods are available to lists?", "question": "What operations are available to all mutable sequences?"}, {"answer": "str.translate(table [,deletechars])", "question": "String method for fast character substitution?"}, {"answer": "str.split([sep [, maxsplit]])", "question": "Split a string?"}, {"answer": "str.join(list)", "question": "Combine items of list with a string, resulting in a string?"}, {"answer": "str.find(sub [, start [, stop]])\n-1 if none\ncan also count.", "question": "Locate a substring?"}, {"answer": "str.strip([chars])", "question": "Strip white space?"}, {"answer": "new_dict = {}\nnew_dict = dict(seq_key_value_tuples)\nnew_dict = old_dict.copy()\nnew_dict.fromkeys([seq [, value_to_set])", "question": "How do you create a dictionary?"}, {"answer": "Check its length?\nk in dct\n(returns a Boolean)\ndct.has_key(key) is deprecated\nlen(dct)", "question": "How do you determine if a key is in a dictionary?"}, {"answer": "x  = dct[key]\nx = dct.get(key [, default_value_to_return])\nx = dct.setdefault(key [, default_to_set_&_return])\nx = dct.pop(key [, default]) \u2013 removes item\nx = dct.popitem() \u2013 removes random item\nset: dct[key] = value", "question": "How do you retrieve and set an item in a dictionary?"}, {"answer": "del dct[key]\ndct.clear()", "question": "How do you remove items from a dictionary?"}, {"answer": "dict_new.update(dict_old)", "question": "How do you combine dictionaries?"}, {"answer": "seq  = dct.items()\nseq  = dct.keys()\nseq = dct.values()", "question": "What three ways can you return the elements of a dictionary as a sequence?"}, {"answer": "len(s)\ns.copy()\nset1.difference(set2) or set1 - set 2\nset1.intersection(set2) or set1 & set 2\nset1.isdisjoint(set2)\nset1.issubset(set2)\nset1.issuperset(set2)\nset1.symmetric_difference(set2) or set1 ^ set 2\nset1.union(set2) or set1 | set 2", "question": "What methods are available to all sets?"}, {"answer": "s.add(item)\ns.update(any_iterable)\ns.clear()\ns.discard(item)\ns.remove(item) \u2013 key error if not member\ns.pop() \u2013 remove random\n(can also do diff/intersect updates)", "question": "How do you add/remove items from a mutable set?"}, {"answer": "Callable \u2013 built-in(c/c++), user-defined(def/lambda), type, object(with __call__), methods(instance, class, static)\nModule\nClasses \u2013 ancestor of all types/classes\nTypes \u2013 type of built-in types/classes", "question": "What are python\u2019s built-in types (for program structure)?"}, {"answer": "obj.__doc__\nobj.__name__", "question": "How do you retrieve the documentation string for functions, methods, classes, types, instances, or modules?\nHow do you determine the name?"}, {"answer": "user-defined function: function attributes\nclass/type: class methods and variables\ninstance: instance data\nmodule: module\u2019s namespace", "question": "What does __dict__ hold?"}, {"answer": "mod.__file__ and mod.__path__", "question": "How do you determine module\u2019s file and package?"}, {"answer": "obj_meth.__class__\nclass.__bases__", "question": "How do you find a method or instances class?\nA classes inheritance?"}, {"answer": "obj.__module__\nobj.__abstractmethods__", "question": "Find a class/type/instances module?\nFind abstract methods?"}, {"answer": "func.__defaults__\nfunc.__globals__\nfunc.__closure__", "question": "Determine function namespace/scope?"}, {"answer": "repr(object)\neval(string)\ntuple(seq), list(seq), set(seq)\ndict(seq_key_value_tuple)", "question": "Convert object to string? \nString to object?\nSequence to tuple? List? Set?\nSequence of (key, value) tuples to dict?"}, {"answer": "min_value = a if a <= b else b\ngood with list comprehensions and generators\nexample\n:values = [1, 100, 45, 23, 73, 37, 69]\nclamped = [x if x < 50 else 50 for x in values]\nprint(clamped) # [1, 50, 45, 23, 50, 37, 50]", "question": "What is a conditional expression?"}, {"answer": "Evaluates a function with some of its variable\n:f = partial(foo, 1, 2)\nand returns a function which can be called later with all the variables\n:results = f(3)", "question": "What does partial() from functools do?"}, {"answer": "No, scope is visible outside loop and last value is saved.\nThrow an exception, break/continue only do one level.", "question": "Are loop iteration variables local to the loop?\nHow do you break from a deeply nested loop?"}, {"answer": "for i, x in enumerate(seq)\nfor x, y in zip(seq1, seq2)\n(use itertools izip() to get generator in p2)", "question": "How do you loop with an index?\nHow do you loop in parallel?"}], "title": "Essential Ref: Ch. 1-5"}