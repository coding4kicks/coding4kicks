{"cards": [{"answer": "1) Allow one module to be written with little knowledge of the code in another module.\n2) Allow a module to be redesigned and reimplemented without modifying other parts of the system.", "question": "What are two important goals of modularity?"}, {"answer": "Outline the major tasks, successively refine into smaller subtasks until those tasks are expressible in basic operations.", "question": "How did Dijkstra\u2019s 1969 paper, \u2018Structured Programming,\u2019 argue a program should be designed?"}, {"answer": "Data structures.", "question": "What else can be refined besides tasks?"}, {"answer": "divide and conquer", "question": "What is another term for the refinement into smaller tasks, often associated with recursive algorithms?"}, {"answer": "Implementing parts of a program in a simple way to understand if the design will really work.", "question": "Describe the development method of prototyping?"}, {"answer": "Component", "question": "What is a term for a meaningful part of a program, partially independent of other parts of a program? (not module)"}, {"answer": "1) Interface \u2013 description of visible component parts.\n2) Specification \u2013 description of behavior of component, as observable through its interface.", "question": "Name two important concepts in modular development."}, {"answer": "A function\nThe interface (function header) is the name, parameters, and return type.\nThe specification describes relationship between parameters and return type.", "question": "What is a simple example of a program component?"}, {"answer": "Components can be replaced by any other component that satisfies the specification.", "question": "Name an advantage of a system where components rely only on stated specifications?"}, {"answer": "Something that emphasizes the general properties of some segment of code and hides the details.", "question": "In programming languages, what is an abstraction mechanism?"}, {"answer": "client \u2013 part of a program that uses a component\nimplementation \u2013 part of a program that defines a component.\nInteraction between the client of an abstraction and the implementation of the abstraction is usually restricted to a specific interface.", "question": "Two common terms associated with abstraction are client and implementation.  What do they mean and how do they interact?"}, {"answer": "The procedure or function (procedural abstraction)", "question": "What is one of the oldest abstraction mechanisms in programming languages?"}, {"answer": "1) Well-defined interface\n2) Information hiding\n3) Re-use", "question": "Name three reasons to encapsulate code into a function."}, {"answer": "1) Abstract data-type declarations\n2) Modules", "question": "What are two types of data-type abstractions?"}, {"answer": "1) A type\n2) A specified set of operations", "question": "What two things make up an abstract data type?"}, {"answer": "Through its interface.\nPrograms should be restricted so that only the declared operations of an abstract type can be applied.", "question": "What should be the only way to use an abstract data type?"}, {"answer": "When different representations do not affect program behavior.\nSo a type has respresentation-independence when different implementations are indistinguishable by clients of the type.", "question": "What is representational independence?"}, {"answer": "Constructors \u2013 build elements of the type.\nOperators \u2013 map elements of the type to other elements of the type.\nObservers \u2013 return results of some other type.\n[??? \u2013 seems more applicable to low level types]", "question": "What are three general groups for the operations on a type?"}, {"answer": "A programming language construct that allows a number of declarations to be grouped together.", "question": "What is a module?"}, {"answer": "1) A definition module (interface)\n2) An implementation module", "question": "In Modula, what are the two types of modules?"}, {"answer": "The ability to have multiple versions of the same abstract data type, such as stack or queue, work with different types of data, such as int or string.\n(parametric polymorphism)", "question": "What does type parameterization allow?"}, {"answer": "Functors\nTemplates", "question": "What are parameterized structures called in ML?\nIn C?"}, {"answer": "A set of operations on some hidden data.", "question": "What makes up an object?"}, {"answer": "A uniform way of encapsulating almost any combination of data and functionality.", "question": "What do objects provide?"}, {"answer": "Through simple operations called messages or member-function calls.", "question": "How do interactions with an object occur?"}, {"answer": "1) Dynamic lookup\n2) Abstraction\n3) Subtyping\n4) Inheritance", "question": "What four features make a language object oriented?"}, {"answer": "Identifying important concepts and using objects to structure the way these concepts are embodied in the software system.\nIteratively\n1) Identify objects at a level of abstraction\n2) Identify semantics (behavior) of these objects\n3) Identify relationships among objects\n4) Implement the objects", "question": "What is object oriented design and how did Grady Booch suggest about going about it?"}, {"answer": "Procedures and the data structures.\nGenerally easier in object oriented languages than procedural ones.", "question": "For complex task, what two things should be refined together? "}, {"answer": "Its class\nAn instance", "question": "In common object-oriented languages such as Smalltalk, C++, and Java, what determines the implementation of an object? \nWhat do we call a created object?"}, {"answer": "methods or member functions\ninstance variables, fields, or data members.", "question": "What are the function parts of an object generally called?\nWhat about the data parts?"}, {"answer": "The ability for the object to choose how it responds to a message.  So different objects may respond to the same message in different ways.  Methods are selected dynamically at runtime. (not to be confused with overloading \u2013 mechanism based on static types of operands)", "question": "What is dynamic lookup?"}, {"answer": "Hiding implementation details in a programming unit behind an interface.", "question": "What is abstraction?"}, {"answer": "The ability to use one object in place of another if it has all the required functionality.", "question": "What is subtyping?"}, {"answer": "The ability to reuse the definition of an object to make another object.", "question": "What is inheritance?"}, {"answer": "delegation-based\nobjects are created from other objects directly\nan example is Dylan\n(also JavaScript \u2013 prototypical inheritance == delegation-based?)", "question": "What is a type of object-oriented language besides class based?\nWhat is the difference?\nWhat is an example language?"}, {"answer": "If x is an object, then a call to a function f in x with variables y and z, becomes f(x, y, z) since the results depend on x.  Multiple dispatch takes into account all three objects x, y, z in the lookup, where as single dispatch just looks at x.  Multiple can be useful in things like equality testing, but tends to lose encapsulation, and is not the norm (not in Java, Smalltalk, C++)", "question": "What is multiple dispatch? \nSingle dispatch?"}, {"answer": "It allows uniform operations over various types of data.", "question": "What is the primary advantage of subtyping?"}, {"answer": "Code duplication", "question": "What code smell does inheritance help prevent?"}, {"answer": "1) Implementation view \u2013 private interface\n2) Client view \u2013 public interface\n3) Inheritance view \u2013 protected interface", "question": "With inheritance, what are the three views of a class?  \nWhat are these interfaces called?"}, {"answer": "With closures \u2013 put the private data in the static scope.\nSubtyping and inheritance will still be missing.", "question": "What is a way to simulate objects (the dynamic lookup portion) in non-oop languages with higher order functions?\nWhat is still missing?"}, {"answer": "Subtyping is a relationship on interfaces.\nInheritance is a relationship on implementation.", "question": "What is the difference between subtyping and inheritance?"}, {"answer": "In function-oriented, data is organized separately from functions, in object-oriented data and functions are grouped together.\nSo in function-oriented programs it is easy to add new operations but difficult to add new types of data, whereas in object-oriented programs it is easy to add new types of data, but difficult to add new operations.", "question": "What is the main difference in the structural organization of function-oriented languages versus object-oriented ones?\nWhat does this make easier and harder in each?"}, {"answer": "A general solution that has come from the repeated addressing of similar problems.", "question": "What is a design pattern?"}, {"answer": "Simula\nSmalltalk (everything is an object)", "question": "What was the first language with objects?\nWhat language refined them?"}, {"answer": "dynamic lookup (subtype polymorphism) \u2013 the same message name invokes different code depending upon the object that receives the message.", "question": "What do advocates of objects-oriented languages mean when they use the term \u201cpolymorphism?\u201d"}, {"answer": "self", "question": "In Smalltalk, how do you reference the object receiving the message?"}, {"answer": "super", "question": "In Smalltalk, how do you search for a message in a parent class?"}, {"answer": "Yes, a subclass may not implement all the methods of its superclass.  Also, two classes could be defined independently and have the same functionality, so they are the same types but there is no inheritance.  \nSo, subtyping is a relationship between types, a property important to users, while subclassing is about inheritance, a property of implementations.", "question": "Is subclassing different from subtyping in Smalltalk?"}], "title": "Concepts in Prog Langs - Part 3"}