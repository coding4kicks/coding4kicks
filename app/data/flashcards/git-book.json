{"cards": [{"answer": "A system that records changes to files over time.", "question": "What is version control?"}, {"answer": "Centralized", "question": "What type of version control system is CVS, Subversion, and Perforce."}, {"answer": "Distributed", "question": "What type of version control is Git, Mercurial, or Bazaar?"}, {"answer": "A full version of the repository.  Thus every checkout is a backup.", "question": "In distributed version control, what does each client receive?"}, {"answer": "Most VCSs think of data as changes in files, Git thinks of data as a snapshot of the entire filesystem at given point.  ", "question": "How does Git think about the data it stores differently from most version control systems?"}, {"answer": "Yes.", "question": "Does Git work offline?"}, {"answer": "SHA-1 hash", "question": "What mechanism does Git use for checksums?"}, {"answer": "Via the hash", "question": "How does Git reference files in its database?"}, {"answer": "1) Committed \u2013 Data is saved in local database (Unmodified)\n2) Modified \u2013 Changed file but not committed to database\n3) Staged \u2013 Modified file is marked to go into next commit (snapshot)", "question": "What are the three states files in Git can be in?\nWhat do they mean?"}, {"answer": "1) Working Directory \u2013 Single checkout of one version of a project. Pulled from compressed database and on local disk to work with.\n2) Staging Area \u2013 File containing data about what will go into next commit. Sometime called the index.\n3) Git Directory \u2013 Where metadata and objects are stored.  Part that is cloned.", "question": "What are the three main sections of a Git project?"}, {"answer": "git config\n1) /etc/gitconfig \u2013 for all users, pass option --system to git config\n2) ~/.gitconfig \u2013 for current user, pass option --global to git config\n3) .git/config \u2013 local to project, trumps others", "question": "What tool can be used to change configuration settings?\nWhere are the three places these configuration settings can be stored?"}, {"answer": "Identity info\n:git config --global user.name \u201cSuper Fresh\u201d\ngit config --global user.email funky@fresh.com\nIdentity info is included with every commit.", "question": "What should you always set when you install Git? Why?"}, {"answer": "Your text editor and diff tool", "question": "What two other things can you set?"}, {"answer": "1) git help <verb>\n2) git <verb> --help\n3) man git-<verb>", "question": "What are the three ways to get help."}, {"answer": "1) Start new one with git init, which creates a .git file to store the skeleton.\n2) Clone an existing Git project repository", "question": "What are the two ways to start a Git project?"}, {"answer": "Because Git copies the whole database, and doesn\u2019t just checkout files.", "question": "Why does Git use clone, while other VCSs use checkout?"}, {"answer": "Tracked and Untracked", "question": "What two states can a file in your project be in?"}, {"answer": "git status\nyes", "question": "What command is used to determine the state of files?\nDoes it show untracked files?"}, {"answer": "git add <file name>", "question": "What command tells git to track a file?"}, {"answer": "Yes, if it was modified, added, and then modified again prior to commit.", "question": "Is it possible for a file to be both staged and not staged?"}, {"answer": ".gitignore\n# for comments\nglob patterns\nend with / for directory\nstart with ! to negate a pattern", "question": "What file holds the name of files to ignore?\nWhat patterns does it recognize?"}, {"answer": "Simplified regular expressions used by the shell.\n*  - matches zero or more characters\n[abc]  - matches any character inside the brackets\n? \u2013 matches a single character\n[0-9] \u2013 matches characters in the range.\n** - ignore in subdirectories too (doc/**/*.txt)", "question": "What are glob patterns?"}, {"answer": "Shows you what you\u2019ve changed but not yet staged.  Diff of files in working directory and staging area.  Important: doesn\u2019t show all changes, only unstaged ones.", "question": "What does git diff with no arguments do?"}, {"answer": "git diff --cached or git diff --staged. ", "question": "How do you compare your staged changes to your last commit?"}, {"answer": "Shows the diff of the file/s.  This diff and the comments are stripped out when the commit message is saved.\nInline commit message.\nSkip staging area by adding all files.", "question": "What does the \u2013v commit option do?\n-m ?\n-a?"}, {"answer": "git rm <file name>\njust deleting a file doesn\u2019t stage the file. rm is needed just like add.\nUse \u2013f option if the file is already staged.", "question": "How do you remove a file?"}, {"answer": "git rm --cached <file name>", "question": "How do you remove a file from being tracked, while still keeping it on disk (i.e. when you forgot to add something to .gitignore."}, {"answer": "Files, directories, and glob patterns.\nNeed a \\ in front of * pattern", "question": "What can be passed to git rm?"}, {"answer": "A rename convenience: git mv file_name_old.txt file_name_new.txt.  Same as mv on local, rm original and add new.", "question": "What is mv?"}, {"answer": null, "question": "How do you list commits made in reverse chronological order?\nWhat 4 things are shown?"}, {"answer": "--pretty has options oneline for viewing many commits, along with short, full and fuller.\nIt also has format opton (--pretty=format:\u201d%h - %an, %ar : %s\u201d so you can totally specify the output for parsing.", "question": "Which two ways can you control output?"}, {"answer": "--graph\n--online or --format (i.e. git log --pretty=format:\u201d%h - %s\u201d --graph)", "question": "What shows an ascii drawing of merge history?  \nAnd what format options are usefully to use with it?"}, {"answer": "pass -- path after all the options. \u2018--' is used to separate the path from the options, a space is between it and the path, and the path is always last.\n--since or --until to limit it to dates\n--author to limit it to an author\n--grep text to search for text\n(--all-match is necessary with grep and author to limit it to cases where both are matched)", "question": "How do you limit the output to a directory or file in git log?\nHow do you limit it to a date?\nHow do you limit it to an author?\nHow do you limit it to specific text?"}, {"answer": "gitk and pass almost all the filtering options of git log", "question": "How do you launch the Tcl/Tk git viewer?"}, {"answer": "git commit --ammend\nWill launch the editor with your last commit.  You can add new files prior to executing this command if you forgot to add a file with the commit.", "question": "How do you change your last commit?"}, {"answer": "git reset HEAD <file>\n(git status reminds you)", "question": "How do you unstage a file?"}, {"answer": "git checkout -- <file>\n(git status also reminds you.  This command can loose info since the file changes where never commited)", "question": "How do you unmodify a modified file (re-checkout the file from the git database)?"}, {"answer": "Repositories on the internet or network.\nOrigin.\ngit remote\n-v option", "question": "What are remote repositories?\nWhat name does git give to the repository the project was cloned from?\nHow do you list remotes?\nHow do you show the urls?"}, {"answer": "git add [shortname] [url]\nthe shortname is an easy reference for fetching/pulling/pushing", "question": "How can you add a remote?\nWhat does the shortname do?"}, {"answer": "git fetch <remote-name>\ngit pull <remote-name>\n(git pull alone will generally pull and merge the origin)", "question": "How do you get all the data from a remote repository without merging?\nHow do you get the data from a repository you are tracking and merge automatically?"}, {"answer": "git push [remote-name] [branch-name]", "question": "How to you send changes you\u2019ve made to a remote?"}, {"answer": "git remote show [remote-name]\ngit remote rename [old-name] [new-name]\ngit remote rm [remote-name]", "question": "How do you inspect a remote?\nHow do you rename a remote?\nHow do you remove a remote?"}, {"answer": "With git tag -a <label> -m \u201cmessage\u201d\nWhere label is something like v1.4.\nAnotated (checksum, tagger, email, message, Gnu privacy guard if desired.)\n and lightweight (only the label).\ngit tag\nNo, must push with git push remote [tag-name] or --tags to push all.\nSame as normal but add short sha or sha of commit to the end", "question": "How do you mark a specific commit?\nWhat are the two types of marks?\nHow do you show them?\nAre they pushed automatically to remotes?\nHow do you mark an old commit?"}, {"answer": "Yes.", "question": "Can you make aliases and enable autocomplete?"}, {"answer": "A commit object containing\n:1) a pointer to the snapshot of the data you staged : a tree (changed directories) with blobs (changed files)\n2) the author and message metadata\n3) zero or more pointers to the parent commits \n(0 for the first commit, 1 for normal, 2 for a merge)", "question": "When Git performs a commit, what 3 things does it store?"}, {"answer": "A branch is a lightweight pointer to a commit.\nThe master points to the last commit and moves forward automatically.\nGit keeps a pointer HEAD, the points to the current branch", "question": "What is a branch?\nWhat is the master branch?\nHow does Git know which branch you are on?"}, {"answer": "git branch [name]\ngit checkout [name]\ngit checkout \u2013b [name]", "question": "How do you create a branch?\nHow do you switch to a branch?\nHow do you do both?"}, {"answer": "Create a new branch, switch to it, make a commit.  Switch back to the old branch, make a commit, and now the two branches have diverged.", "question": "How can you cause two branches to diverge?"}, {"answer": "Because they are simply light weight points, whereas in most VCSs they are copies of the repository.", "question": "Why are branches one of Git\u2019s advantages."}, {"answer": "git merge [branch] (so finish commits, go to master, and then merge other branch)\nA fast forward is when the branch head only needs to move forward to a new commit since there is no divergent work to merge.\ngit branch \u2013d [name] to delete (branch must be merged into current unless use -D)", "question": "How do you merge a branch?\nWhat is a fast forward?\nHow do you delete a branch?"}, {"answer": "Changes in master can be pulled into hotfix, or hotfix\u2019s changes can be pulled into master.", "question": "With two divergent branches: master and hotfix, what are the two ways the work can be merged?"}, {"answer": "The snapshots of the commit to merge into, the commit to merge in, and the common ancestor of the two.", "question": "What three snapshots does Git use for merging divergent branches?"}, {"answer": "A merge conflict happens and Git pauses the merge.  \ngit status will show the file as unmerged\nGit places the diff inside the file.  You must choose one version or the other, or merge the conflicts.  Above ===== is the merged into file, below the merge in file.\ngit mergetool\nrun git status again to verify file has changed to modified\ngit commit (you can add a message describing the merge)", "question": "What happens if two branches have modified the same part of the same file?\nHow do you determine the file?\nHow does git change the file?\nHow do you launch a merge tool?\nHow do you know the file is ready to be merged?\nHow do you finalize the merge"}, {"answer": "git branch\n*\n--merged\n--no-merged", "question": "How do you list branches?\nWhat indicates the current branch?\nWhat option shows which branches are merged with the current branch? \nUn-merged?"}, {"answer": "Long running branches \u2013 where master is the most stable, new work is done on develop and merged in later once stable.\nTopic branches \u2013 where new branches are used for new features or bug fixes.\n(can use both together \u2013 master, develop, topic1 off of develop, bugfix off of master)", "question": "What are two types of common git workflows?"}, {"answer": "Branches in your local repository that refer to branches on your remote repository.  You can\u2019t move them, they only change via network communication.", "question": "What are remote branches?"}, {"answer": "No you must merge them into your local branch.  So if you fetch origin/hotfix you must merge that into you local hotfix branch.", "question": "Can you work on remote branches that you fetch?"}, {"answer": "git push (remote) (branch)", "question": "How do you share work?"}, {"answer": "Local branches with a direct relationship to a remote branch (i.e. when you clone a repository your local master refers to origin/master and thus pull and push automatically refer to it.  When you checkout a remote branch it is set up as tracking: git checkout \u2013b [branch] [remotename]/[branch].  You can also use shorthand --track.)", "question": "What are tracking branches?"}, {"answer": "git push origin :[branch]", "question": "How do you delete a remote?"}, {"answer": "Merge and Rebase", "question": "What are the two main ways to combine branches?"}, {"answer": "It replays changes in one branch onto another so there is only one linear branch.  \nIt achieves the same results as merge, but creates a linear history, so when you push to a remote repository you don\u2019t own, the person merging the branch only needs to do a fast forward merge.", "question": "What does rebase do?\nWhy would you use it?"}, {"answer": "Do not rebase commits you\u2019ve pushed to a public repository.  Others will need to merge your new rebased work in their own if they had pulled your original commits.  So only rebase local work prior to pushing.", "question": "What is the peril of rebasing?"}, {"answer": "git clone --bare my_project my_project.git", "question": "What command is used to create a bare repository for a server from an existing project?"}, {"answer": "1) Centralized \u2013 everyone pulls and pushes\n2) Integration-Manager\n3) Dictator and Lieutenants \u2013 like integration-manager with multiple masters and one main master", "question": "What are three types of distributed workflows?"}, {"answer": "1) Project maintainer pushes to public repository\n2) Contributor clones the repository (fork on Github)\n3) Contributor makes changes and pushes to their copy\n4) Contributor emails maintainer with a pull request\n5) The maintainer adds the contributor\u2019s repository as a remote and pulls/merges changes to his local\n6) The maintainer pushes to the main public remote", "question": "What are the steps of the Integration-Manager workflow (such as that used on Github)?"}, {"answer": "Check for white space errors with git diff --check\nTry to make each commit logically separate changes (use --patch if necessary)\nWrite commit messages with 1 line summary, space, additional details include \u2013 bullet points if necessary.  Mention motivation for change and contrast it with previous implementation.  Use present imperative tense: \u201cAdd tests for\u2026\u201d", "question": "What are some commit guidelines?"}, {"answer": "No.  If the maintainers cherry-pick changes or don\u2019t merge anything, pushing a fork for the pull request is best since it is easier to merge the public master.", "question": "When push up changes to a fork should you use master?"}, {"answer": "git log (branch) --not master", "question": "How do you check which commits are in a branch but not in the master?"}, {"answer": "When you are on a branch and comparing it with master if master has moved forward.  The diff will seem like all newly added lines are being deleted from master.  You want to compare the branch with it\u2019s common ancestor with master.  Use git diff master\u2026(branch)", "question": "When will git diff master give funny results?"}, {"answer": "git cherry-pick (commit hash)", "question": "How do you pull in one commit from a branch?"}, {"answer": "git archive", "question": "How can you create a release of your code for people who don\u2019t use Git?"}, {"answer": "git stash\nretrieve with git stash apply\nremove with git stash drop\n(can have multiple stashes)", "question": "If you\u2019ve done work on a branch that your not ready to commit, but you need to switch branches, what command can you use?"}, {"answer": "git add \u2013i", "question": "How do you interactively stage files?"}, {"answer": "git commit --amend (don\u2019t do if already pushed since changes the sha-1)\ngit rebase \u2013i HEAD~3 to edit last 3 commits and current in interactive editor\n(this will change current commit and last three, so don\u2019t do if already pushed)\nswitch the word pick to edit for the commits you wish to change and hit enter\ntype git commit--amend to change the commit and git rebase --continue when done\nYou can reorder, delete, and squash commits from the interactive editor.", "question": "How do you change the last commit?\nOlder ones?"}, {"answer": "git filter-branch --tree-filter \u2018rm \u2013f password.txt\u2019 HEAD", "question": "What is the nuclear option to remove a file from every commit?"}, {"answer": "git blame to see changes to part of a file\ngit bisect to isolate the middle point between a good state and a bad state.", "question": "How can you trouble shoot bugs?"}, {"answer": "Through client side and server side hooks.  Stored in .git/hooks directory.  Can use any scripting language.", "question": "How can you interact programmatically with Git events?"}, {"answer": null, "question": "What are the four main parts of .git?\n1) HEAD \u2013 a file pointing to the current branch\n2) index \u2013 a file storing staging information\n3) ojbects \u2013 directory storing all content for the database (key-value store)\n4) refs \u2013 directory storing pointers into commit objects in the data (branches)"}, {"answer": "1) commit objects \u2013 details of commits, point to a tree and parent commit/s\n2) tree objects \u2013 details of a directory\n3) blob object \u2013 a compressed file", "question": "What are the three main types of objects in Git?"}, {"answer": "1) branches\n2) tags \u2013 (another type of object similar to commits)\n3) remotes", "question": "What 3 things are stored in ref (references)?"}, {"answer": "Git initially stores objects as their own blob for each file, but if only a single line is changed this can be expensive.  So Git combines loose objects into a single binary packfile that tracks changes.", "question": "What are packfiles?"}], "title": "Git Book"}